
// -------------------------------------------------------------
// 
// File Name: hdlsrc/integrator/Integrator.v
// Created: 2023-05-17 15:09:02
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0166667
// Target subsystem base rate: 0.2
// Explicit user oversample request: 12x
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Integrator
// Source Path: integrator/Integrator
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Integrator
          (clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [7:0] In1;  // uint8
  output  ce_out;
  output  y;


  wire enb_1_12_0;
  wire enb_1_12_1;
  wire enb;
  wire [7:0] Sum_out1;  // uint8
  reg [7:0] Delay_out1;  // uint8
  wire Compare_To_Constant_out1;


  Integrator_tc u_Integrator_tc (.clk(clk),
                                 .reset(reset),
                                 .clk_enable(clk_enable),
                                 .enb(enb),
                                 .enb_1_12_0(enb_1_12_0),
                                 .enb_1_12_1(enb_1_12_1)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_12_0) begin
          Delay_out1 <= Sum_out1;
        end
      end
    end



  assign Sum_out1 = In1 + Delay_out1;



  assign Compare_To_Constant_out1 = Sum_out1 > 8'b00001010;



  assign y = Compare_To_Constant_out1;

  assign ce_out = enb_1_12_1;

endmodule  // Integrator

has popup